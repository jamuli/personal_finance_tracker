{"version":3,"sources":["components/About.js","components/Budget.js","components/Header.js","components/Investments.js","components/Overview.js","App.js","serviceWorker.js","index.js"],"names":["About","Component","Budget","Header","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","as","to","Investments","Overview","App","path","exact","component","Boolean","window","location","hostname","match","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iUAYeA,EAVf,iLAEI,OACE,6BACE,0CAJR,GAA2BC,aCUZC,EAVf,iLAEI,OACE,6BACE,2CAJR,GAA4BD,a,gBC6BbE,EA1Bf,iLAEI,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,mBACA,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,CAAUC,GAAID,IAAME,GAAG,KAAvB,QACA,kBAACJ,EAAA,EAAIE,KAAL,CAAUC,GAAID,IAAME,GAAG,WAAvB,UACA,kBAACJ,EAAA,EAAIE,KAAL,CAAUC,GAAID,IAAME,GAAG,gBAAvB,eACA,kBAACJ,EAAA,EAAIE,KAAL,CAAUC,GAAID,IAAME,GAAG,UAAvB,iBAZd,GAA4BhB,aCObiB,EAVf,iLAEI,OACE,6BACE,gDAJR,GAAiCjB,aCUlBkB,EAVf,iLAEI,OACE,6BACE,6CAJR,GAA8BlB,a,MCwBfmB,MAhBf,WACE,OACE,yBAAKN,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOO,KAAK,IAAIC,OAAK,EAACC,UAAWJ,IACjC,kBAAC,IAAD,CAAOE,KAAK,SAASE,UAAWvB,IAChC,kBAAC,IAAD,CAAOqB,KAAK,UAAUE,UAAWrB,IACjC,kBAAC,IAAD,CAAOmB,KAAK,eAAeE,UAAWL,QCP5BM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCGNC,cAVe,CACbC,OAAQ,0CACRC,WAAY,wCACZC,YAAa,+CACbC,UAAW,wBACXC,cAAe,GACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIjBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.73fef1c1.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport class About extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>About</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default About\r\n","import React, { Component } from 'react'\r\n\r\nexport class Budget extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Budget</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Budget\r\n","import React, { Component } from 'react'\r\n\r\nimport { Nav, Navbar } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport class Header extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar bg=\"light\" expand=\"lg\">\r\n          <Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n          <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"mr-auto\">\r\n              <Nav.Link as={Link} to=\"/\">Home</Nav.Link>\r\n              <Nav.Link as={Link} to=\"/budget\">Budget</Nav.Link>\r\n              <Nav.Link as={Link} to=\"/investments\">Investments</Nav.Link>\r\n              <Nav.Link as={Link} to=\"/about\">About</Nav.Link>\r\n\r\n            </Nav>\r\n            {/* <Form inline>\r\n              <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n              <Button variant=\"outline-success\">Search</Button>\r\n            </Form> */}\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header\r\n","import React, { Component } from 'react'\r\n\r\nexport class Investments extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Investments</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Investments\r\n","import React, { Component } from 'react'\r\n\r\nexport class Overview extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Overview</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Overview\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport About from './components/About.js';\nimport Budget from './components/Budget.js';\nimport Header from './components/Header.js';\nimport Investments from './components/Investments.js';\nimport Overview from './components/Overview.js';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Header />\n        <Switch>\n          <Route path=\"/\" exact component={Overview} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/budget\" component={Budget} />\n          <Route path=\"/investments\" component={Investments} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as firebase from 'firebase';\n\n\n\nconst config = {\n  apiKey: \"AIzaSyD2CQ_HzEPVHNCKOlvgxmgks9mTeAP1lRk\",\n  authDomain: \"my-finances-now-27891.firebaseapp.com\",\n  databaseURL: \"https://my-finances-now-27891.firebaseio.com\",\n  projectId: \"my-finances-now-27891\",\n  storageBucket: \"\",\n  messagingSenderId: \"385069616628\",\n  appId: \"1:385069616628:web:b4979431c051881f3efda1\",\n  measurementId: \"G-ETMJHSCFWD\"\n};\nfirebase.initializeApp(config);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}